开发日志
--------------------------------------------------
[20181015]
- 创建了工作目录MangoMIPS32
- 创建了README.md和.gitignore
- 创建了DevLog.txt（该文件）作为工作开发日志
- 创建了defines.v，增加了完整指令译码的宏定义和部分其他宏定义
- 决定使用vscode代替Notepad++作为编辑器
--------------------------------------------------
[20181017]
- 修改了defines.v，增加了常数定义、线宽定义和ALUOp定义
  【注：ALUOp相关定义照搬MangoMIPS初代版本，可能有问题】
--------------------------------------------------
[20181023]
- 添加了PC.v、IF_ID.v，暂时是完善的
- 添加了ID.v，仅有大体的框架
- 添加了RegFile.v，优化了逻辑层次，已完善
- T: 适当照搬上个版本，能一定程度上减少工作量
--------------------------------------------------
[20181024]
- 把源代码移动到Src文件夹，整理了目录结构
- 微调defines.v
--------------------------------------------------
[20181025]
- T: 决定第一批实现的指令有：
-- SLL/SRL/SRA
-- SLLV/SRLV/SRAV
-- MOVZ/MOVN
-- ADD/ADDU/SUB/SUBU/AND/OR/XOR/NOR/SLT/SLTU
-- ADDI/ADDIU/SLTI/SLTIU/ANDI/ORI/XORI/LUI
- 已经实现这些指令的PC/IF/ID/EX段，后续未写
- 下一批实现：CLO/CLZ，HI/LO移动：CLO/CLZ已有思路，类似二分法，极大减少层数
--------------------------------------------------
[20181029]
- Q: alu运算结果可能作为写寄存器的数或者load的地址，前送时注意
- A: 增加memtoreg信号，load相关不在ex/mem进行任何前送
- 整理了模块结构，重命名部分模块
- 完成了能运行第一批指令的整体架构
- 移位、逻辑指令测试通过，算术、移动留待下一批测试
- 向master分支推送了以上所述的预览版本
- T: 第二批指令：
-- CLO/CLZ
-- MFHI/MTHI/MFLO/MTLO
-- SYNC/PREF [作为空指令执行]
-- MUL/MULT/MULTU
-- DIV/DIVU
-- MADD/MADDU/MSUB/MSUBU
- 为了方便综合出结果和后期调试，加上了NSCSCC2018指定的4个WB级信号作为输出
- 截至目前CLO/CLZ已经实现，未调试
- T: 由于MUL的输出是到寄存器的，暂定乘的阶段都在EX完成，乘累加再挪到MEM，即EX阶段只写HILO，MEM才有对HILO的读操作
--------------------------------------------------
[20181030]
- T: 把MUL操作的结果输出改回MEM段；乘累加、乘、HILO移动指令会与load指令相关处理方式相同，使用标记来判别
- T: 模块内部使用异步复位，在顶层将复位信号同步化，即，所有外来异步信号都应该被视为跨时钟域信号
- 初步添加了Control模块，还没适配
- 向Decode添加了MTHI/MTLO/MFHI/MFLO的解码
- T: TLB相关的CP0冲突暂不予处理，CP0放置在MEM段不变
--------------------------------------------------
[20181101]
- 适配了流水线控制模块，目前暂未连接有效的stallreq（全部接地）
- 添加了config.v，作为后期可配置选项的预留
--------------------------------------------------
[20181102]
- T: MFHI/MFLO在EX段就读取HILO的结果，不再进行流水线停顿，因为该种相关出现频率极高。
- T: 除此之外HILO寄存器的读取都发生在MEM段
- T: MUL相关发生频率较低，可以阻塞一拍。当前MEM段向寄存器输出结果的指令只剩各种load和MUL
- 由于保持HI和LO的写一致性能降低实现复杂度，将HI和LO的写使能信号重新合并
- HILO移动与乘法模块完成过半
- T: load相关实际上是要等到WB段才能传出结果的，类似的MUL相关如何处理？
--------------------------------------------------
[20181104]
- 用mem段alu合并的方式，使得MUL只用停1周期，访存照样停2周期
- 用ready信号表示指令是否产生结果, 用resnrdy表示
- 微调Decode.v达成上述结果
- 注意，顶层模块未修改
- 争议问题：关于横穿MultRes模块的alures信号命名问题：易读还是格式好？